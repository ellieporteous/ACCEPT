"""
Master's Individual Research Project
Automated colony counting - Eleanor Porteous Technique 
Author: Eleanor Porteous 
""" 

from tkinter import *
from tkinter.filedialog import askopenfilename
from PIL import ImageTk,Image 
import cv2
import numpy as np
import sys
from itertools import chain
sys.setrecursionlimit(1000000)
from xlsxwriter import Workbook

class ColonyCounter(Frame):
    def __init__(self, master=None):
        Frame.__init__(self, master)             
        self.master = master
        self.init_window()
    
    def init_window(self):
        self.master.title("ACCEPT")
        self.pack(fill = BOTH, expand = 1)
        text = Label(self, text="Welcome to the Automated Colony Counting - Eleanor Porteous Technique. Please select an image (png or jpeg only).")
        text.place(x=0, y=0)              
        SelectButton = Button(self, text = "Select Image",command = self.browsefile)
        SelectButton.place(x = 0, y = 25) 
        
    def browsefile(self):
        ''' Function to select file of choice'''
        path = askopenfilename(filetypes=(("jpg file", "*.jpg"), ("png file ",'*.png'), ("All files", "*.*"),)) 
        string = "File selected : " + str(path)+'                                                            '
        text = Label(self, text = string)
        text.place(x = 0, y = 50) 
        self.Input(path)
        
    def Input(self,path):  
        '''Fucntion for user to input threshold size of colony'''
        content = StringVar()
        text = Label(self, text="Input Minimum Colony Size (pixels): ")
        text.place(x=100, y=25)          
        Threshold_Entry = Entry(self)
        Threshold_Entry.place(x=325, y = 25)   
        text = Label(self, text="Save File as: ")
        text.place(x=525, y=25)          
        Save_as = Entry(self)
        Save_as.place(x = 625, y = 25)
        EnterButton = Button(self, text = "Enter", command = lambda: self.Enter(Threshold_Entry,path,Save_as)) 
        EnterButton.place(x=825, y = 25)
    
    def Enter(self,Threshold_Entry,path,Save_as):
        '''Fucntion to save the threshold value set from Input'''
        Threshold = int(Threshold_Entry.get())
        file_name = str(Save_as.get())
        string = "Minimum area of 50 cells set as " + str(Threshold) + " pixels  "
        text = Label(self, text = string)
        text.place(x = 0, y = 75)  
        RunButton = Button(self, text = "Run", command = lambda: self.Run(path,Threshold,file_name))
        RunButton.place(x=875, y = 25)
        self.Display_Image(self.Load(path),0,300)
        text = Label(self, text="Selected Image")
        text.place(x=0, y=275) 
        
    def Run(self,path,Threshold,file_name):
        '''Function to run the colony counting'''
        
        circles=cv2.HoughCircles(self.Contrast(self.Load(path,'blur'),4), cv2.HOUGH_GRADIENT,1,600,param1=70,param2=70,minRadius=300,maxRadius=500)
        if circles.all() == None:
            raise Exception('Wells not detected')
        elif len(circles[0]) != 6:
            raise Exception('Wells not detected')
        else:    
            Im = cv2.GaussianBlur(self.Contrast(self.Load(path,'grey'),1),(9,9),cv2.BORDER_DEFAULT)
            circles = np.uint16(np.around(circles)) 
            mask = self.Create_Mask(self.Load(path,'grey'), circles)  
            masked = Im * mask
            Segmented = self.Segment_colonies(masked)
            Segmented_rbg = cv2.merge((Segmented,Segmented,Segmented))
            order  = self.Order(circles,Im)
            print(circles)
            if len(order) == 6:
                text = Label(self, text='________')
                text.place(x=0 , y= 108)
                text = Label(self, text='RESULTS')
                text.place(x = 0, y = 100)
                result = []
                for i in order:                       
                    colonies = self.Identify_Colonies(Segmented.copy(),circles[0][i])        
                    No_Colonies = 0
                    Colonies = dict()
                    area_per_pixel = 2.5*(10**-9)      
                    for colony_no in range(len(colonies)):
                        pixel_no = len(colonies[colony_no])
                        colony_area = pixel_no * area_per_pixel
                        if colony_area < (Threshold*area_per_pixel):
                            Segmented = self.Colour_Colony(Segmented_rbg,colonies[colony_no],0)
                            continue
                        else: 
                            Segmented = self.Colour_Colony(Segmented_rbg,colonies[colony_no],1)
                            No_Colonies+=1
                            Colonies.update({No_Colonies:colony_area})
                    result.append(Colonies)
                    
                self.Save(result,file_name)
                text = Label(self, text = 'top left: ' + str(len(result[0].keys()))+'       ')
                text.place(x = 0, y = 125)
                text = Label(self, text = 'top middle: ' + str(len(result[1].keys()))+'       ')
                text.place(x = 0, y = 150)
                text = Label(self, text = 'top right: ' + str(len(result[2].keys()))+'       ')
                text.place(x = 0, y = 175)  
                text = Label(self, text = 'bottom left: ' + str(len(result[3].keys()))+'       ')
                text.place(x = 0, y = 200)
                text = Label(self, text = 'bottom middle: ' + str(len(result[4].keys()))+'       ')
                text.place(x = 0, y = 225)
                text = Label(self, text = 'bottom right: ' + str(len(result[5].keys()))+'       ')
                text.place(x = 0, y = 250) 
                
                image_size=list(np.shape(self.Load(path)))         
                self.Display_Image(Segmented_rbg,(image_size[1]/5+10),300) 
                text = Label(self, text="Result Image")
                text.place(x=(image_size[1]/5+10), y=275)  
                text = Label(self, text="Green = Colony. Red = Group of cells too small to be a colony.")
                text.place(x=(image_size[1]/5+10), y = (image_size[0]/5+310))
        
            else:
                raise Exception('Wells not ordered') 
        
    def Create_Mask(self,Im,circles):
        '''Uses the circles to creat a binary mask of only the dish area '''
        mask = np.zeros(Im.shape)
        for x, y, r in circles[0]:
            cv2.circle(mask, (x,y), int(r-20), 255, -1)    
        mask = mask/255
        return mask
    
    def Order(self,Circles,Im):
        '''Order the circles found in relation to the poisiton in the image'''
        order = [0, 0, 0, 0, 0, 0]
        image_size=list(np.shape(Im))
        for i in range(len(order)):
            if Circles[0][i][1] < image_size[0]/2:
                if Circles[0][i][0] < image_size[1]/3:
                    order[0] = i
                elif Circles[0][i][0] > image_size[1] * 2/3:
                    order[2] = i
                else:
                    order[1] = i
            else: 
                if Circles[0][i][0] < image_size[1]/3:
                    order[3] = i
                elif Circles[0][i][0]>image_size[1]*2/3:
                    order[5] = i
                else:
                    order[4] = i
        return order
    
    def Display_Image(self,Im,X,Y):
        '''Function to display image at position x y of the frame'''
        i = Image.fromarray(np.uint8(Im)).convert('RGB')
        i = i.resize((round(i.size[0]/5),round(i.size[1]/5)), Image.ANTIALIAS) #ANTIALIAS
        im =  ImageTk.PhotoImage(i)
        img = Label(self, image = im)
        img.image = im
        img.place(x=X,y=Y)

    def Load(self,im,*args):
        '''Load fucntion that takes a string and will read image.
            This can be as colour, grey, blur images whcih can be displayed'''
        if 'grey' in args:
            Im = cv2.imread(im,0)
        elif 'blur' in args:
            Im = cv2.medianBlur(self.Load(im,'grey'),5)
        else:
            Im = cv2.imread(im)  
        return Im
    
    def Contrast(self,image,value):
        image=image*value
        return image
    
    def Segment_colonies(self,image): 
        '''This function takes the removed backgroud image and will use thresholds to only contain pixels with the stained cells.'''      
        lower_mask = image > 0 
        upper_mask = image < 210 
        threshold_Mask = np.array(upper_mask*lower_mask,dtype=int) 
        Segmented_Im = image * threshold_Mask
        return Segmented_Im
            
    def define_colony(self,image,pixels,x,y,image_size):
        '''This is a recursive function that will assign itself in the array if it
            is a pixel stained cell, and will call its 8-neigbours'''
        for i in range(0,2):
            for j in range(-1,2):
                if (0<=i+x<image_size[0]) and (0<=j+y<image_size[1]):
                    if image[i+x][j+y].all() != 0:
                        if (i+x,j+y) not in pixels:
                            pixels.append((i+x,j+y))
                            self.define_colony(image,pixels,i+x,j+y,image_size)
    
    def Identify_Colonies(self,Im,circle):
        '''This is the fucntion that will loop across the image, and once it 
            identifies a new colony, will call the recursive function to complete it.
            It outputs a dictionary with key=colony number and values=pixels in the colony'''
        rows = np.arange(circle[0]-(circle[2]+5),circle[0]+(circle[2]+5),1)
        cols = np.arange(circle[1]-(circle[2]+5),circle[1]+(circle[2]+5),1) 
        colonies = dict()  
        key=0      
        image_size=list(np.shape(Im))  
        for i in cols:
            for j in rows: 
                if (0<=i<image_size[0]) and (0<=j<image_size[1]): 
                    if Im[i][j].all() != 0: 
                        exists = False 
                        if (i,j) in chain(*list(colonies.values())): 
                            exists = True
                        if exists == False:                        
                            pixels = list()
                            pixels.append((i,j))
                            self.define_colony(Im,pixels,i,j,image_size)
                            colonies.update({key:pixels})
                            key+=1                                      
        return colonies
    
    def Colour_Colony(self,im,colony,var):
        '''Sets pixel in colony to be either be red or green depending on threshold'''
        for pixel in range(len(colony)):
            if var == 0:
                im[colony[pixel][0]][colony[pixel][1]][0] = 255
                im[colony[pixel][0]][colony[pixel][1]][1] = 0
                im[colony[pixel][0]][colony[pixel][1]][2] = 0
            elif var == 1:
                im[colony[pixel][0]][colony[pixel][1]][0] = 0
                im[colony[pixel][0]][colony[pixel][1]][1] = 255
                im[colony[pixel][0]][colony[pixel][1]][2] = 0
        return im
    
    def Save(self,result,Save_as):
        wb = Workbook(str(Save_as) + '_Data.xlsx')
        dish = ['top left','top middle','top right','bottom left','bottom middle','bottom right']
        for i in range(6):
            ws = wb.add_worksheet(dish[i])
            row = 0

            for v in result[i].values():
                ws.write(row,0,v)
                row+=1
        wb.close()                                        
    
    
if __name__ == "__main__":       
    root = Tk()
    root.geometry("1000x600")
    app = ColonyCounter(root)
    root.mainloop()
    
